<?xml version="1.0" encoding="UTF-8"?>

<!--____________________________________________________________________________

    Copyright 2000-2016 Adobe Systems Incorporated. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use these files except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  ___________________________________________________________________________-->


<xsl:stylesheet 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:aots="http://aots.adobe.com/2001/aots"
  version="2.0">

<xsl:output 
  method="text"
  encoding="utf-8"/>

<xsl:template match='/'>
// Copyright (C) 2019 YesLogic Pty. Ltd.
// Copyright 2000-2016 Adobe Systems Incorporated. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use these files except in compliance with the License.
// You may obtain a copy of the License at
// 
//  http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is automatically @generated by aots2testrust.xsl
// It is not intended for manual editing.

    <xsl:apply-templates select='//aots:gsub-test'/>
    <xsl:apply-templates select='//aots:gpos-test'/>
    <xsl:apply-templates select='//aots:context-test'/>
    <xsl:apply-templates select='//aots:cmap-test'/>
    <xsl:apply-templates select='//aots:cmap-uvs-test'/>
</xsl:template>

<xsl:template match='aots:cmap-test'>
#[test]<xsl:if test='@id = "cmap8_test1"'>
#[ignore = "cmap subtable format 8 is not yet implemented"]</xsl:if>
fn <xsl:value-of select='@id'/>() {
    cmap_test(
        "<xsl:value-of select='@font'/>.otf",
        <xsl:value-of select='@platformID'/>,
        <xsl:value-of select='@encodingID'/>,
        &amp;[<xsl:value-of select='@inputs'/>],
        &amp;[<xsl:value-of select='@outputs'/>]
    )
}
</xsl:template>

<xsl:template match='aots:cmap-uvs-test'>
#[test]
#[ignore = "CMAP format 14 not yet implemented"]
fn <xsl:value-of select='@id'/>() {
    cmap_uvs_test(
        "<xsl:value-of select='@font'/>.otf",
        &amp;[<xsl:value-of select='@inputs'/>],
        &amp;[<xsl:value-of select='@outputs'/>]
    )
}
</xsl:template>

<xsl:template match='aots:gsub-test'>
#[test]<xsl:if test='@id = "gsub3_1_simple_t1" or @id = "gsub3_1_multiple_t1" or @id = "gsub3_1_lookupflag_t1"'>
#[ignore = "implements behaviour that is not part of the specification"]</xsl:if>
fn <xsl:value-of select='@id'/>() {
    gsub_test(
        "<xsl:value-of select='@font'/>.otf",
        "latn", "UNKN", "test",
        &amp;[<xsl:value-of select='@inputs'/>],
        &amp;[<xsl:value-of select='@outputs'/>]
    )
}
</xsl:template>

<xsl:template match='aots:gpos-test'>
#[test]<xsl:if test='@id = "gpos1_1_simple_t4"'>
#[ignore = "vertical advance is not yet implemented"]</xsl:if><xsl:if test='@id = "gpos2_1_next_glyph_t1"'>
#[ignore = "pairpos next glyph layout is not yet implemented"]</xsl:if><xsl:if test='@id = "gpos4_simple_1" or @id = "gpos2_2_test4"'>
#[ignore = "mark positioning is not yet implemented"]</xsl:if><xsl:if test='@id = "gpos3_lookupflag_1" or @id = "gpos3_lookupflag_2" or @id = "gpos4_multiple_anchors_1"'>
#[ignore = "our code does the right thing but does not output different positions for the glyphs as required by the test, it reorders them"]</xsl:if><xsl:if test='@id = "gpos3_test1a" or @id = "gpos3_test3a" or @id = "gpos3_test3b" or @id = "gpos3_test3c" or @id = "gpos3_test3d" or @id = "gpos4_simple_4" or @id = "gpos4_simple_5"'>
#[ignore = "cursive anchor positioning is not yet implemented"]</xsl:if><xsl:if test='@id = "gpos5_test1a" or @id = "gpos5_test1b" '>
#[ignore = "the gsub part of this test passes but mark positioning not being implemented fails the gpos part"]</xsl:if><xsl:if test='@id = "gpos6_test1a"'>
#[ignore = "mark positioning is not yet implemented"]</xsl:if>
fn <xsl:value-of select='@id'/>() {
    gpos_test(
        "<xsl:value-of select='@font'/>.otf",
        "latn", "UNKN", "test",
        &amp;[<xsl:value-of select='@inputs'/>],
        &amp;[<xsl:value-of select='@xdeltas'/>],
        &amp;[<xsl:value-of select='@ydeltas'/>],
        None,
        <xsl:if test='@attach'>Some(&amp;[<xsl:value-of select='@attach'/>])</xsl:if>
        <xsl:if test='not(@attach)'>None</xsl:if>
    )
}
</xsl:template>

<!--
NOTE: lookupflag
The gpos tests for these test cases are a little strange. The input glyphs look something like
0, 20, 90, 21, 91, 22, 92, 23, 93, 94, 24, 90, 25, 91, 26, 0
glyphs 90,91,92,93,94 are defined as marks by the GDEF table. The expected xDeltas include
an offset for glyph 23 that can only occur if the mark glphs are ignored when applying GPOS.
Either the test case is wrong or we don't do that. Harfbuzz has these tests disabled without
a comment on why too.
-->
<xsl:template match='aots:context-test'>
#[test]
fn <xsl:value-of select='@id'/>_gsub() {
    gsub_test(
        "gsub_<xsl:value-of select='@font'/>.otf",
        "latn", "UNKN", "test",
        &amp;[<xsl:value-of select='@inputs'/>],
        &amp;[<xsl:value-of select='@outputs'/>]
    )
}

#[test]<xsl:if test='@id = "chaining1_lookupflag_t1" or @id = "chaining2_lookupflag_t1" or @id = "chaining3_lookupflag_t1" or @id = "context1_lookupflag_t1" or @id = "context2_lookupflag_t1" or @id = "context3_lookupflag_t1"'>
#[ignore = "invalid test? Harfbuzz also ignores see NOTE: lookupflag in aots2testrust.xsl"]</xsl:if><xsl:if test='@id = "context1_next_glyph_t1" or @id = "context1_next_glyph_t1" or @id = "context2_next_glyph_t1" or @id = "context3_next_glyph_t1"'>
#[ignore = "next glyph layout is not yet implemented"]</xsl:if><xsl:if test='@id = "context1_simple_t3" or @id = "context2_simple_t3"'>
#[ignore = "pairpos next glyph layout is not yet implemented"]</xsl:if>
fn <xsl:value-of select='@id'/>_gpos() {
    gpos_test(
        "gpos_<xsl:value-of select='@font'/>.otf",
        "latn", "UNKN", "test",
        &amp;[<xsl:value-of select='@inputs'/>],
        &amp;[<xsl:value-of select='@xdeltas'/>],
        &amp;[<xsl:value-of select='@ydeltas'/>],
        <xsl:if test='@refpos'>Some(&amp;[<xsl:value-of select='@refpos'/>]),</xsl:if>
        <xsl:if test='not(@refpos)'>None,</xsl:if>
        <xsl:if test='@attach'>Some(&amp;[<xsl:value-of select='@attach'/>])</xsl:if>
        <xsl:if test='not(@attach)'>None</xsl:if>
    )
}
</xsl:template>


</xsl:stylesheet>
